"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[228],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=a.createContext({}),l=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(m.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,m=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=o,h=d["".concat(m,".").concat(u)]||d[u]||p[u]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7426:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:3},i="Commands",s={unversionedId:"basic-concepts/commands",id:"basic-concepts/commands",title:"Commands",description:"Commands are the second most important building block in Krok. They come right after repositories. Commands define the",source:"@site/docs/basic-concepts/commands.md",sourceDirName:"basic-concepts",slug:"/basic-concepts/commands",permalink:"/docs/basic-concepts/commands",draft:!1,editUrl:"https://github.com/krok-o/docs/tree/main/packages/create-docusaurus/templates/shared/docs/basic-concepts/commands.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Repositories",permalink:"/docs/basic-concepts/repositories"},next:{title:"Events",permalink:"/docs/basic-concepts/events"}},m={},l=[{value:"What are commands",id:"what-are-commands",level:2},{value:"Command configuration",id:"command-configuration",level:3},{value:"How to write a command",id:"how-to-write-a-command",level:2},{value:"SDK",id:"sdk",level:3},{value:"What language to use",id:"what-language-to-use",level:3},{value:"Required arguments",id:"required-arguments",level:3},{value:"Platform Support",id:"platform-support",level:3}],c={toc:l};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"commands"},"Commands"),(0,o.kt)("p",null,"Commands are the second most important building block in Krok. They come right after repositories. Commands define the\nactual commands that can be executed on an event. They have a lot of configuration so let's go through each."),(0,o.kt)("h2",{id:"what-are-commands"},"What are commands"),(0,o.kt)("p",null,"Commands define executable actions which can be taken for an event. For example, a Slack-Notification commands can send\nany kind of configured slack message based on an event. Let's look at how that looks like."),(0,o.kt)("h3",{id:"command-configuration"},"Command configuration"),(0,o.kt)("p",null,"This is the anatomy of a command configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: delivery.krok.app/v1alpha1\nkind: KrokCommand\nmetadata:\n  name: slack-command\n  namespace: krok-system\nspec:\n  enabled: true\n  image: localhost:5001/krok-o/slack-notification:v0.0.2\n  platforms:\n    - github\n  readInputFromSecrets:\n    - name: slack-secret\n      namespace: krok-system\n")),(0,o.kt)("p",null,"What's happening here then? ",(0,o.kt)("inlineCode",{parentName:"p"},"enabled")," is self explanatory. If the command is disabled, it won't be executed."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note"),": This might change to ",(0,o.kt)("inlineCode",{parentName:"p"},"suspended")," in the future to not have to define this attribute on every command."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"platforms")," is a list of platforms that this command can support. This means, that this command understands each\nplatform's payload and can call the right method to get the right data it would need to execute on. It's also possible\nthat the command just simply doesn't care because what it does is not dependent on a platform. Such as, just sending the\nname and the event type to a slack channel."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"readInputFromSecrets")," defines a list of secrets that the user can configure ( or other commands might create secrets\nas output which depending commands can read input from ) from which key-value pairs are then passed over to the command\nas arguments."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: wait-command-args\n  namespace: krok-system\ndata:\n  channel: MzBz\n  # Slack token, not provider token\n  token: MzBz\n  message: MzBz\n")),(0,o.kt)("p",null,"The command will read these and pass them as arguments. The command might also declare dependencies."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: delivery.krok.app/v1alpha1\nkind: KrokCommand\nmetadata:\n  name: slack-command\n  namespace: krok-system\nspec:\n  enabled: true\n  image: localhost:5001/krok-o/slack-notification:v0.0.2\n  platforms:\n    - github\n  readInputFromSecrets:\n    - name: slack-secret\n      namespace: krok-system\n  dependencies:\n    - setup-command\n    - generate-artifact-command\n")),(0,o.kt)("p",null,"These dependencies then need to be added to the repository object so they can execute and pass over any information they\ndeclare to the next command."),(0,o.kt)("h2",{id:"how-to-write-a-command"},"How to write a command"),(0,o.kt)("p",null,"So, what does a command look like? You can find all commands written by Krok ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/krok-o/commands"},"here"),".\n",(0,o.kt)("em",{parentName:"p"},"Note"),": At the time of this writing there are only a handful of commands available to choose from."),(0,o.kt)("h3",{id:"sdk"},"SDK"),(0,o.kt)("p",null,"For Go commands, there is a convenience SDK provided by Krok to extract information from various payload types. This SDK\ncan be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/krok-o/command-sdk"},"here"),". Krok will expand this as it matures."),(0,o.kt)("h3",{id:"what-language-to-use"},"What language to use"),(0,o.kt)("p",null,"Virtually any language can be used that can produce an executable and get understand basic command line options."),(0,o.kt)("p",null,"There are some ",(0,o.kt)("a",{parentName:"p",href:"#required-arguments"},"required arguments")," that the application must be able to take, otherwise, anything\ncan be used. The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/krok-o/commands"},"Commands")," repo contains a few examples."),(0,o.kt)("h3",{id:"required-arguments"},"Required arguments"),(0,o.kt)("p",null,"The following arguments are required by every command to be set:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"payload")," -> this contains the payload received from the platform"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"artifact-url")," -> if the event involves the need for the source code ( like a push or a merge ) this url will point\nto a unique, in-cluster server from which the source can be downloaded"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"event-type")," -> the involved event ( ",(0,o.kt)("inlineCode",{parentName:"li"},"push"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"pull"),", etc )"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"platform")," -> the configured platform on which the event happened ( ",(0,o.kt)("inlineCode",{parentName:"li"},"github"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"gitlab"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"gitea"),", etc )")),(0,o.kt)("p",null,"The command sdk for Go commands contains a convenience method for adding these flags called ",(0,o.kt)("inlineCode",{parentName:"p"},"AddRequiredFlagsToCommand"),"."),(0,o.kt)("h3",{id:"platform-support"},"Platform Support"),(0,o.kt)("p",null,"The command has to declare what platform it supports. If the command declares that it support ",(0,o.kt)("inlineCode",{parentName:"p"},"github")," and it is run on\n",(0,o.kt)("inlineCode",{parentName:"p"},"gitea")," it will report a failure and then skip this command."))}d.isMDXComponent=!0}}]);